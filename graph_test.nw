

\section{Test programs for the graph module}

\subsection{Graph reading module}
Common graph reading module for graph programs. Start node is left in s.

<<read graph>>=
int n, e, s;
scanf("%d %d %d", &n, &e, &s);

edges.clear();
edges.resize(n, vector<int>(0));
edgecost.clear();
edgecost.resize(n, vector<DTYPE>(0));

for (int i=0; i<e; i++)
{
	int f, t, c;
	scanf("%d %d %d", &f, &t, &c);
	edges[f].push_back(t);
	edgecost[f].push_back(c);
}
@

\subsection{Distance listing module}
Common module for listing distance results.

<<write distance>>=
for (int i=0; i<n; i++)
		printf("%d\n", dist[i]);
@

\subsection{Test program for dijkstras}

<<dijkstras.cpp>>=
<<headers>>
<<graph config>>
<<graph adjacency>>
<<graph adjacency distance results>>
<<dijkstras>>
int main()
{
	<<read graph>>
	
	dijkstras(s);
	
	<<write distance>>
	
	return 0;
}
@

\subsection{Test program for bellman-ford}

<<bellmanford.cpp>>=
<<headers>>
<<graph config>>
<<graph adjacency>>
<<graph adjacency distance results>>
<<bellmanford>>
int main()
{
	<<read graph>>
	
	bellmanford(s);
	
	<<write distance>>
	
	return 0;
}
@

\subsection{Test program for minimum spanning tree}

<<minspan.cpp>>=
<<headers>>
<<graph config>>
<<graph adjacency>>
<<graph adjacency distance results>>
<<spanningtree>>

int main()
{
	int n, e;
	
	scanf("%d %d", &n , &e);
	edges.clear();
	edges.resize(n, vector<int>(0));
	edgecost.clear();
	edgecost.resize(n, vector<DTYPE>(0));
	
	for (int i=0; i<e; i++)
	{
		int f, t, c;
		scanf("%d %d %d", &f, &t, &c);
		edges[f].push_back(t);
		edgecost[f].push_back(c);
		edges[t].push_back(f);
		edgecost[t].push_back(c);
	}
	
	int res = spanningtree();
	
	printf("%d\n", res);
	
	return 0;
}
@

\subsection{Alternative test program for minspan}

<<minspan2.cpp>>=
<<headers>>
<<disjointunion data>>
<<disjointunion>>

int main()
{
	vector<pair<int, pair<int, int> > > edges;
	
	int n, e;
	scanf("%d %d", &n, &e);
	
	for (int i=0; i<e; i++)
	{
		int f,t,c;
		scanf("%d %d %d", &f, &t, &c);
		edges.push_back(make_pair(c, make_pair(f,t)));
	}
	
	sort(edges.begin(), edges.end());
	init(n);
	
	int totlen = 0;
	
	for (int i=0; i<e; i++)
	{
		if (find(edges[i].second.first) != find(edges[i].second.second))
		{
			dunion(edges[i].second.first, edges[i].second.second);
			totlen += edges[i].first;
		}
	}
	
	printf("%d\n", totlen);
	return 0;
}
@

\subsection{Test programs for maxflow}

<<maxflow.cpp>>=
<<headers>>
<<graph config>>
<<maxflow config>>
<<graph adjacency>>
<<maxflow graphdata>>
<<graph adjacency distance results>>
<<dijkstras>>
<<maxflow>>

int main()
{
	int n, e, source, sink;
	scanf("%d %d %d %d", &n, &e, &source, &sink);

	edges.clear();
	edges.resize(n, vector<int>(0));
	edgecost.clear();
	edgecost.resize(n, vector<DTYPE>(0));
	edgecap.clear();
	edgecap.resize(n, vector<CTYPE>(0));

	for (int i=0; i<e; i++)
	{
		int f, t, c, cap;
		scanf("%d %d %d %d", &f, &t, &c, &cap);
		edges[f].push_back(t);
		edgecost[f].push_back(c);
		edgecap[f].push_back(cap);
	}
	
	pair<int, int> result = maxflow(source, sink);
	
	printf("%d %d\n", result.first, result.second);
	
	return 0;
}
@

<<maxflow3.cpp>>=
<<headers>>
<<graph config>>
<<graph adjacency>>
<<graph adjacency distance results>>
<<dijkstras minnorm>>
<<base maxflow>>

int main()
{
	int n, e, source, sink;
	scanf("%d %d %d %d", &n, &e, &source, &sink);

	edges.clear();
	edges.resize(n, vector<int>(0));
	edgecost.clear();
	edgecost.resize(n, vector<DTYPE>(0));

	for (int i=0; i<e; i++)
	{
		int f, t, c, cap;
		scanf("%d %d %d %d", &f, &t, &c, &cap);
		edges[f].push_back(t);
		edgecost[f].push_back(cap);
	}
	
	int result = maxflow(source, sink);
	
	printf("%d %d\n", result, 0);
	
	return 0;
}
@

\subsection{Test program floyd-warshall}

<<floydwarshall.cpp>>=
<<headers>>
<<graph config>>
<<matrix graph>>
<<floydwarshall>>
int main()
{
	int n, e, s;
	
	scanf("%d %d %d", &n, &e, &s);
	
	dist.clear();
	dist.resize(n, vector<DTYPE>(n, INF));
	for (int i=0; i<n; i++)
		dist[i][i] = 0;
	
	for (int i=0; i<e; i++)
	{
		int f, t, c;
		scanf("%d %d %d", &f, &t, &c);
		if (dist[f][t] > c)
			dist[f][t] = c;
	}
	
	floydwarshall();
	
	for (int i=0; i<n; i++)
		printf("%d\n", dist[s][i]);
	return 0;
}	
@

\subsection{Test program tarjan}

<<2sat.cpp>>=
<<headers>>
<<graph config>>
<<graph adjacency>>
<<disjointunion data>>
<<tarjan data>>
<<disjointunion>>
<<tarjan>>
int main()
{
	int n, c;
	scanf("%d %d", &n, &c);
	
	edges.clear();
	edges.resize(2*n, vector<int>(0));
	
	for (int i=0; i<c; i++)
	{
		int a, b;
		scanf("%d %d", &a, &b);
		if (a < 0)
			a = n + (-a-1);
		else
			a = a-1;
		if (b < 0)
			b = n + (-b-1);
		else
			b = b-1;
		edges[(n+a)%(2*n)].push_back(b);
		edges[(n+b)%(2*n)].push_back(a);
	}
	
	tarjan();
	
	bool isSat = true;
	for (int i=0; i<n; i++)
	{
		if (find(i) == find(n+i))
			isSat = false;
	}
	
	if (isSat)
		printf("YES\n");
	else
		printf("NO\n");
		
	return 0;
}
@

\subsection{Test program hungarian}
<<hungarian.cpp>>=
<<headers>>
<<graph config>>
<<matrix graph>>
<<hungarian data>>
<<update labels>>
<<add to tree>>
<<hungarian>>
int main()
{
	int n;
	scanf("%d", &n);
	dist.assign(n, vector<int>(n,0));
	for (int i=0; i<n; i++)
	{
		for (int j=0; j<n; j++)
		{
			scanf("%d", &dist[i][j]);
		}
	}
	hungarian();
	int sum = 0;
	for (int i=0; i<n; i++)
		sum += dist[i][xy[i]];
	printf("%d\n", sum);
	return 0;
}
