\section{Graph algorithms}

We have some common configuration settings.

<<graph config>>=
#define DTYPE int
#define INF (1<<30)
#define EXTRA_CHECK
@

\subsection{Adjacency list}

The adjecency list representation: Edges gives the destination node of each edge, edgecost the length.

<<graph adjacency>>=
vector<vector<int> > edges;
vector<vector<DTYPE> > edgecost;
@

\subsubsection{Distance results}
The adjacency list distance algorithms return their results in the following: From gives the node that is the predecessor of this node in the route from start, dist the distance from the start node to this node.

<<graph adjacency distance results>>=
vector<pair<int, int> > from;
vector<DTYPE> dist;
@

\subsubsection{Bellman-Ford}
\begin{tabular}{|l|l|}
\hline
Complexity & $O(VE)$\\
\hline
Timing data & $44.433$s ($V=10^5$, $E=10^6$)\\
\hline
\end{tabular}

<<bellmanford>>=
void bellmanford(int start)
{
	int n = edges.size();
	
	from.assign(n, make_pair(-1,0));
	dist.assign(n, INF);
	
	dist[start] = 0;
	
	for (int i=0; i<n; i++)
	{
		for (int f = 0; f<n; f++)
		{
			for (int j=0; j<edges[f].size(); j++)
			{
				int t = edges[f][j];
				int cost = edgecost[f][j];
				EXTRA_CHECK
				
				if (dist[t] > dist[f] + cost)
				{
					dist[t] = dist[f] + cost;
					from[t] = make_pair(f,j);
				}
			}
		}
	}
}
@

\subsubsection{Dijkstra's}
\begin{tabular}{|l|l|}
\hline
Complexity & $O(E\log{V})$\\
\hline
Timing data & $0.151$s ($V=10^5$, $E=10^6$)\\
\hline
\end{tabular}

<<dijkstras>>=
void dijkstras(int start)
{
	int NODES = edges.size();
	
	priority_queue<pair<int, int> > work;
	vector<bool> done(NODES, false);
	
	dist.assign(NODES,INF);
	from.assign(NODES, make_pair(-1,0));
	
	dist[start] = 0;
	work.push(make_pair(0, start));
	
	while (!work.empty())
	{
		int cur = work.top().second;
		work.pop();
		
		if (done[cur])
			continue;
		
		done[cur] = true;
		
		for (int i=0; i<edges[cur].size(); i++)
		{
			int t = edges[cur][i];
			int c = edgecost[cur][i];
			
			if (done[t] || dist[cur] + c >= dist[t])
				continue;
			
			EXTRA_CHECK
			
			dist[t] = dist[cur] + c;
			from[t] = make_pair(cur,i);
			work.push(make_pair(-dist[t], t));
		}
	}
}
@

\subsubsection{Maxflow}
\begin{tabular}{|l|l|}
\hline
Complexity & $O(FE\log{V})$ ($F$ is flow)\\
\hline
Timing data & $0.02$s ($V=1000$, $E=10000$)\\
\hline
\end{tabular}

<<dijkstras minnorm>>=
void dijkstras(int start)
{
	int NODES = edges.size();
	
	priority_queue<pair<int, int> > work;
	vector<bool> done(NODES, false);
	
	dist.assign(NODES,0);
	from.assign(NODES, make_pair(-1,0));
	
	dist[start] = INF;
	work.push(make_pair(0, start));
	
	while (!work.empty())
	{
		int cur = work.top().second;
		work.pop();
		
		if (done[cur])
			continue;
		
		done[cur] = true;
		
		for (int i=0; i<edges[cur].size(); i++)
		{
			int t = edges[cur][i];
			int c = edgecost[cur][i];
			
			if (done[t] || min(dist[cur], c) <= dist[t])
				continue;
			
			EXTRA_CHECK
			
			dist[t] = min(dist[cur], c);
			from[t] = make_pair(cur,i);
			work.push(make_pair(dist[t], t));
		}
	}
}
@

<<base maxflow>>=
int maxflow(int source, int sink)
{
	int n = edges.size();
	int flow = 0;
	vector<vector<int> > medge(0);
	for (int i=0; i<n; i++)
		medge.push_back(vector<int>(edges[i].size(),-1));
	
	while (1)
	{
		dijkstras(source);
		
		if (dist[sink] == 0)
			break;
		
		flow += dist[sink];
		
		// adjust edges
		int cur = sink;
		while (cur != source)
		{
			int f = from[cur].first;
			int j = from[cur].second;
			edgecost[f][j] -= dist[sink];
			if (medge[f][j] == -1)
			{
				medge[f][j] = edges[cur].size();
				medge[cur].push_back(j);
				edges[cur].push_back(f);
				edgecost[cur].push_back(dist[sink]);
			}
			else
			{
				edgecost[cur][medge[f][j]] += dist[sink];
			}
			cur = f;
		}
	}
	
	return flow;
}
@

\subsubsection{Mincost maxflow}
\begin{tabular}{|l|l|}
\hline
Complexity & $O(FE\log{V})$ ($F$ is flow)\\
\hline
Timing data & $0.09$s ($V=1000$, $E=10000$)\\
\hline
\end{tabular}

<<maxflow graphdata>>=
vector<vector<CTYPE> > edgecap;
vector<DTYPE> pot;
@

<<maxflow config>>=
#undef EXTRA_CHECK
#define EXTRA_CHECK if (edgecap[cur][i] == 0) continue;
#define CTYPE int
#define CINF (1 << 30)
@

<<maxflow>>=
pair<int, int> maxflow(int source, int sink)
{
	int n = edges.size();
	int flow = 0, cost = 0;
	pot.assign(n,0);
	vector<vector<int> > medge(0);
	for (int i=0; i<n; i++)
		medge.push_back(vector<int >(edges[i].size(), -1));
	
	while (1)
	{
		dijkstras(source);
		
		if (dist[sink] == INF)
			break;
		
		// find maxadd
		CTYPE maxadd = CINF;
		int cur = sink;
		while (cur != source)
		{
			maxadd = min(maxadd, edgecap[from[cur].first][from[cur].second]);
			cur = from[cur].first;
		}
		
		cost += (pot[sink] + dist[sink])*maxadd;
		flow += maxadd;
		
		// potential adjust
		for (int i=0; i<n; i++)
		{
			for (int j=0; j<edges[i].size(); j++)
			{
				edgecost[i][j] += dist[i] - dist[edges[i][j]];
			}
			pot[i] += dist[i];
		}
		
		// adjust edges
		cur = sink;
		while (cur != source)
		{
			int f = from[cur].first;
			int j = from[cur].second;
			edgecap[f][j] -= maxadd;
			if (medge[f][j] == -1)
			{
				medge[f][j] = edges[cur].size();
				medge[cur].push_back(j);
				edges[cur].push_back(f);
				edgecost[cur].push_back(0);
				edgecap[cur].push_back(maxadd);
			}
			else
			{
				edgecap[cur][medge[f][j]] += maxadd;
			}
			cur = f;
		}
	}
	
	return make_pair(flow, cost);
}
@

\subsubsection{Minimum spanning tree}
\begin{tabular}{|l|l|}
\hline
Complexity & $O((E+V)\log{V})$\\
\hline
\end{tabular}
<<spanningtree>>=
int spanningtree()
{
	int n = edges.size();

	dist.assign(n,INF);
	vector<bool> done(n, false);
	from.assign(n, make_pair(-1,0));
	priority_queue<pair<int, int> > work;
	
	dist[0] = 0;
	work.push(make_pair(0, 0));
	
	DTYPE totaldist = 0;
	
	while (!work.empty())
	{
		int cur = work.top().second;
		work.pop();
		
		if (done[cur])
			continue;
		
		done[cur] = true;
		totaldist += dist[cur];
		
		for (int i=0; i<edges[cur].size(); i++)
		{
			int t = edges[cur][i];
			int c = edgecost[cur][i];
			
			if (done[t] || c >= dist[t])
				continue;
			
			dist[t] = c;
			from[t] = make_pair(cur, i);
			work.push(make_pair(-dist[t], t));
		}
	}
	return totaldist;
}
@

\subsubsection{Tarjans algorithm}

\begin{tabular}{|l|l|}
\hline
Complexity & $O(V+E)$\\
\hline
\end{tabular}

Usage notes: To use for 2sat, make two arrows per clause (a,b), namely an arrow
$\neg a\rightarrow b$ and $\neg b\rightarrow a$, then run tarjan, and check whether
there is any $a$ for which $a$ and $\neg a$ are in the same component.

<<tarjan>>=
void strongcomponent(int v)
{
	tj_index[v] = index_c++;
	lowlink[v] = tj_index[v];
	onstack[v] = true;
	nodestack.push(v);
	
	for (int i=0; i<edges[v].size(); i++)
	{
		if (tj_index[edges[v][i]] == -1)
		{
			strongcomponent(edges[v][i]);
			lowlink[v] = min(lowlink[v], lowlink[edges[v][i]]);
		}
		else if (onstack[edges[v][i]])
		{
			lowlink[v] = min(lowlink[v], tj_index[edges[v][i]]);
		}
	}
	
	if (lowlink[v] == tj_index[v])
	{
		components.push_back(vector<int>(0));
		int w = -1;
		while (w != v)
		{
			w = nodestack.top();
			nodestack.pop();
			components.back().push_back(w);
			dunion(w,v);
		}
	}
}
@

<<tarjan data>>=
vector<int> tj_index;
vector<int> lowlink;
vector<bool> onstack;
stack<int> nodestack;
vector<vector<int> > components;
int index_c;
@

<<tarjan>>=
void tarjan()
{
	int n = edges.size();
	init(n);
	tj_index.assign(n,-1);
	lowlink.assign(n,0);
	onstack.assign(n,false);
	while (!nodestack.empty())
		nodestack.pop();
	components.clear();
	index_c = 0;
	
	for (int i=0; i<n; i++)
	{
		if (tj_index[i] == -1)
			strongcomponent(i);
	}
}
@

\subsection{Matrix representation}

<<matrix graph>>=
vector<vector<DTYPE> > dist;
@

\subsubsection{Floyd-Warshall}

\begin{tabular}{|l|l|}
\hline
Complexity & $O(V^3)$\\
\hline
\end{tabular}

<<floydwarshall>>=
void floydwarshall()
{
	int n = dist.size();
	for (int k=0; k<n; k++)
		for (int i=0; i<n; i++)
			for (int j=0; j<n; j++)
				if (dist[i][k] != INF && dist[k][j] != INF)
					dist[i][j] = min(dist[i][j], dist[i][k]+dist[k][j]);
}
@

\subsection{Hungarian algorithm}

\begin{tabular}{|l|l|}
\hline
Complexity & $O(N^3)$\\
\hline
\end{tabular}

Find maximal matching between two sets, dist[x][y] is interpreted as the value of matching x to y.
DIST SHOULD BE SQUARE!

<<hungarian data>>=
vector<int> lx, ly, xy, yx;
vector<bool> S,T;
vector<int> slack, slackx, prev;
@

<<update labels>>=
void update_labels()
{
	int n = dist.size();
	int delta = INF;
	for (int y=0; y<n; y++)
		if (!T[y])
			delta = min(delta, slack[y]);
	for (int x=0; x<n; x++)
		if (S[x])
			lx[x] -= delta;
	for (int y=0; y<n; y++)
	{
		if (T[y])
			ly[y] += delta;
		else
			slack[y] -= delta;
	}
}
@


<<add to tree>>=
void add_to_tree(int x, int prevx)
{
	int n = dist.size();
	S[x] = true;
	prev[x] = prevx;
	for (int y=0; y<n; y++)
	{
		if (lx[x] + ly[y]-dist[x][y] < slack[y])
		{
			slack[y] = lx[x]+ly[y]-dist[x][y];
			slackx[y] = x;
		}
	}
}
@

<<hungarian>>=
void hungarian()
{
	int max_match = 0;
	int n = dist.size();
	xy.assign(n, -1);
	yx.assign(n, -1);
	lx.assign(n, 0);
	ly.assign(n, 0);
	slack.resize(n);
	slackx.resize(n);
	int x,y,root;
	for (x=0; x<n; x++)
		for (y=0; y<n; y++)
			lx[x] = max(lx[x], dist[x][y]);
	queue<int> q;
	while (max_match != n)
	{
		S.assign(n, false);
		T.assign(n, false);
		prev.assign(n, -1);
		while (!q.empty()) q.pop();
		for (x=0; x<n; x++)
		{
			if (xy[x] == -1)
			{
				q.push(x);
				root = x;
				prev[x] = -2;
				S[x] = true;
				break;
			}
		}
		for (y=0; y<n; y++)
		{
			slack[y] = lx[root]+ly[y]-dist[root][y];
			slackx[y] = root;
		}
		while (true)
		{
			while (!q.empty())
			{
				x = q.front();
				q.pop();
				for (y=0; y<n; y++)
				{
					if (dist[x][y] == lx[x]+ly[y] && !T[y])
					{
						if (yx[y] == -1)
							goto hml_break;
						T[y] = true;
						q.push(yx[y]);
						add_to_tree(yx[y],x);
					}
				}
			}
			
			update_labels();
			for (y=0; y<n; y++)
			{
				if (!T[y] && slack[y] == 0)
				{
					if (yx[y] == -1)
					{
						x = slackx[y];
						goto hml_break;
					}
					else
					{
						T[y] = true;
						if (!S[yx[y]])
						{
							q.push(yx[y]);
							add_to_tree(yx[y],slackx[y]);
						}
					}
				}
			}
		}
		return;
		hml_break:
		max_match++;
		for (int cx=x, cy=y, ty; cx != -2; cx = prev[cx], cy = ty)
		{
			ty = xy[cx];
			yx[cy] = cx;
			xy[cx] = cy;
		}
	}
}
@
